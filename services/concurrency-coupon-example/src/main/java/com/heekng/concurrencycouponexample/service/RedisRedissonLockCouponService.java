package com.heekng.concurrencycouponexample.service;import com.heekng.concurrencycouponexample.domain.CouponService;import com.heekng.concurrencycouponexample.repository.RedisLockRepository;import java.util.concurrent.TimeUnit;import lombok.RequiredArgsConstructor;import org.redisson.api.RLock;import org.redisson.api.RedissonClient;import org.springframework.stereotype.Service;/** *  Redis Redisson을 사용한 락 *  Pub/Sub 방식으로 동작한다. *  락을 획득하길 원하는 클라이언트는 queue에 대기하고, *  redis에서 락 획득 가능 시점에 구독중인 클라이언트에 락을 제공한다. */@Service@RequiredArgsConstructorpublic class RedisRedissonLockCouponService {    private final CouponService couponService;    private final RedissonClient redissonClient;    public void appendCouponUser(Long couponId, Long userId) throws InterruptedException {        RLock lock = redissonClient.getLock(couponId.toString());        try {            boolean available = lock.tryLock(10, 1, TimeUnit.SECONDS);            if (!available) {                return;            }            couponService.appendCouponUser(couponId, userId);        } catch (InterruptedException e) {            throw new RuntimeException(e);        } finally {            lock.unlock();        }    }}